f	IDENT
=	ASSIGN_OP
15	INT_LIT
;	SEMICOLON
i	IDENT
=	ASSIGN_OP
11	INT_LIT
;	SEMICOLON
input	KEY_IN
(	OPEN_PAREN
n	IDENT
)	CLOSE_PAREN
;	SEMICOLON
input	KEY_IN
(	OPEN_PAREN
x	IDENT
)	CLOSE_PAREN
;	SEMICOLON
t	IDENT
=	ASSIGN_OP
(	OPEN_PAREN
x	IDENT
+	ADD_OP
1	INT_LIT
)	CLOSE_PAREN
%	MOD_OP
n	IDENT
;	SEMICOLON
if	KEY_IF
(	OPEN_PAREN
t	IDENT
<	LESSER_OP
n	IDENT
)	CLOSE_PAREN
{	OPEN_CURL
input	KEY_IN
(	OPEN_PAREN
a	IDENT
)	CLOSE_PAREN
;	SEMICOLON
t	IDENT
=	ASSIGN_OP
a	IDENT
+	ADD_OP
f	IDENT
-	SUB_OP
f	IDENT
*	MULT_OP
x	IDENT
;	SEMICOLON
if	KEY_IF
(	OPEN_PAREN
f	IDENT
<	LESSER_OP
i	IDENT
)	CLOSE_PAREN
{	OPEN_CURL
n	IDENT
=	ASSIGN_OP
a	IDENT
+	ADD_OP
i	IDENT
;	SEMICOLON
}	CLOSE_CURL
if	KEY_IF
(	OPEN_PAREN
f	IDENT
>	GREATER_OP
i	IDENT
||	BOOL_OR
f	IDENT
==	EQUAL_OP
i	IDENT
)	CLOSE_PAREN
{	OPEN_CURL
n	IDENT
=	ASSIGN_OP
a	IDENT
+	ADD_OP
i	IDENT
%	MOD_OP
x	IDENT
;	SEMICOLON
}	CLOSE_CURL
if	KEY_IF
(	OPEN_PAREN
n	IDENT
<=	LEQUAL_OP
x	IDENT
)	CLOSE_PAREN
{	OPEN_CURL
f	IDENT
=	ASSIGN_OP
a	IDENT
+	ADD_OP
n	IDENT
;	SEMICOLON
}	CLOSE_CURL
if	KEY_IF
(	OPEN_PAREN
n	IDENT
>=	GEQUAL_OP
x	IDENT
)	CLOSE_PAREN
{	OPEN_CURL
f	IDENT
=	ASSIGN_OP
(	OPEN_PAREN
a	IDENT
+	ADD_OP
n	IDENT
)	CLOSE_PAREN
/	DIV_OP
2	INT_LIT
;	SEMICOLON
}	CLOSE_CURL
if	KEY_IF
(	OPEN_PAREN
f	IDENT
<	LESSER_OP
n	IDENT
&&	BOOL_AND
!	BOOL_NOT
(	OPEN_PAREN
a	IDENT
<	LESSER_OP
5	INT_LIT
)	CLOSE_PAREN
)	CLOSE_PAREN
{	OPEN_CURL
a	IDENT
=	ASSIGN_OP
1	INT_LIT
;	SEMICOLON
}	CLOSE_CURL
else	KEY_ELSE
{	OPEN_CURL
a	IDENT
=	ASSIGN_OP
2	INT_LIT
;	SEMICOLON
}	CLOSE_CURL
}	CLOSE_CURL
else	KEY_ELSE
{	OPEN_CURL
a	IDENT
:	UNKNOWN
=	ASSIGN_OP
3	INT_LIT
;	SEMICOLON
}	CLOSE_CURL
output	KEY_OUT
(	OPEN_PAREN
a	IDENT
)	CLOSE_PAREN
;	SEMICOLON
